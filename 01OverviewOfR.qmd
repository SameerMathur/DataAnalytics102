# Getting Started

## Overview of R programming

1.  R is an **open-source** software environment and programming language designed for statistical computing, data analysis, and visualization. It was developed by Ross Ihaka and Robert Gentleman at the University of Auckland in New Zealand during the early 1990s.

2.  R offers a **wide range of statistical techniques**, including linear and nonlinear modeling, classical statistical tests, and support for data manipulation, data import/export, and compatibility with various data formats.

3.  R offers **free usage, distribution, and modification**, making it accessible to individuals with various budgets and resources who wish to learn and utilize it.

4.  The **Comprehensive R Archive Network (CRAN)** serves as a valuable resource for the R programming language. It offers a vast collection of downloadable packages that expand the functionality of R, including tools for machine learning, data mining, and visualization.

5.  R stands out as a prominent tool within the data analysis community, attracting **a large and active user base**. This community plays a vital role in the ongoing maintenance and development of R packages, ensuring a thriving ecosystem for continuous improvement.

6.  One of R's strengths lies in its **powerful and flexible graphics system**, empowering users to create visually appealing and informative data visualizations for data exploration, analysis, and effective communication.

7.  R facilitates the creation of **shareable and reproducible scripts**, promoting transparency and enabling seamless collaboration on data analysis projects. This feature enhances the ability to replicate and validate results, fostering trust and credibility in the analysis process.

8.  R exhibits strong **compatibility with other programming languages** like Python and SQL, as well as with popular data storage and manipulation tools such as Hadoop and Spark. This compatibility allows for smooth integration and interoperability, enabling users to leverage the strengths of multiple tools and technologies for their data-centric tasks. \[1\]

## Running R locally

R could be run locally or in the Cloud. We discuss running R locally. We discuss running it in the Cloud in the next sub-section.

### Installing R locally

Before running R locally, we need to first install R locally. Here are general instructions to install R locally on your computer:\\

1.  Visit the official website of the R project at [**https://www.r-project.org/**](https://www.r-project.org/).

2.  On the download page, select the appropriate version of R based on your operating system (Windows, Mac, or Linux).

3.  After choosing your operating system, click on a mirror link to download R from a reliable source.

4.  Once the download is finished, locate the downloaded file and double-click on it to initiate the installation process. Follow the provided instructions to complete the installation of R on your computer. \[2\]

### Running R locally in an Integrated Development Environment (IDE)

An Integrated Development Environment (IDE) is a software application designed to assist in software development by providing a wide range of tools and features. These tools typically include a text editor, a compiler or interpreter, debugging tools, and various utilities that aid developers in writing, testing, and debugging their code.

When working with the R programming language on your local machine and looking to take advantage of IDE features, you have several options available:

1.  **RStudio:** RStudio is a highly popular open-source IDE specifically tailored for R programming. It boasts a user-friendly interface, a code editor with features like syntax highlighting and code completion, as well as powerful debugging capabilities. RStudio also integrates seamlessly with version control systems and package management tools, making it an all-inclusive IDE for R development.

2.  **Visual Studio Code (VS Code):** While primarily recognized as a versatile code editor, VS Code also offers excellent support for R programming through extensions. By installing the "R" extension from the Visual Studio Code marketplace, you can enhance your experience with R-specific functionality, such as syntax highlighting, code formatting, and debugging support.

3.  **Jupyter Notebook:** Jupyter Notebook is an open-source web-based environment that supports multiple programming languages, including R. It provides an interactive interface where you can write and execute R code within individual cells. Jupyter Notebook is widely employed for data analysis and exploration tasks due to its ability to blend code, visualizations, and text explanations seamlessly.

These IDE options vary in their features and user interfaces, allowing you to choose the one that aligns best with your specific needs and preferences. It's important to note that while R can also be run through the command line or the built-in R console, utilizing an IDE can significantly boost your productivity and enhance your overall development experience. \[3\]

### RStudio

RStudio is a highly popular integrated development environment (IDE) designed specifically for R programming. It offers a user-friendly interface and a comprehensive set of tools for data analysis, visualization, and modeling using R.

Some notable features of RStudio include:

1.  Code editor: RStudio includes a code editor with advanced features such as syntax highlighting, code completion, and other functionalities that simplify the process of writing R code.

2.  Data viewer: RStudio provides a convenient data viewer that allows users to examine and explore their data in a tabular format, facilitating data analysis.

3.  Plots pane: The plots pane in RStudio displays graphical outputs generated by R code, making it easy for users to visualize their data and analyze results.

4.  Console pane: RStudio includes a console pane that shows R code and its corresponding output. It enables users to execute R commands interactively, enhancing the coding experience.

5.  Package management: RStudio offers tools for managing R packages, including installation, updating, and removal of packages. This simplifies the process of working with external libraries and extending the functionality of R.

6.  Version control: RStudio seamlessly integrates with version control systems like Git, empowering users to efficiently manage and collaborate on their code projects.

7.  Shiny applications: RStudio allows users to create interactive web applications using Shiny, a web development utility for R. This feature enables the creation of dynamic and user-friendly interfaces for R-based applications. \[4\]

To install RStudio on your computer, you can follow these simple steps:

1.  Download RStudio: Visit the RStudio download page and choose the version of RStudio that matches your operating system.

2.  Install RStudio: Once the RStudio installer is downloaded, run it and follow the instructions provided to complete the installation process on your computer.

3.  Open RStudio: After the installation is finished, you can open RStudio by double-clicking the RStudio icon on your desktop or in the Applications folder.

4.  Start an R session: In RStudio, click on the Console tab to initiate an R session. You can then enter R commands in the console and execute them by clicking the "Run" button or using the shortcut Ctrl+Enter (Windows) or Cmd+Enter (Mac). \[5\]

## Running R in the Cloud

Running R in the cloud allows users to access R and RStudio from anywhere with an internet connection, eliminating the need to install R locally. Several cloud service providers, such as Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP), offer virtual machines (VMs) with pre-installed R and RStudio.

Here are some key advantages and disadvantages of running R in the cloud:

**Benefits:**

1.  Scalability: Cloud providers offer scalable computing resources that can be adjusted to meet specific workload requirements. This is particularly useful for data-intensive tasks that require significant computational power.

2.  Accessibility and Collaboration: Cloud-based R allows users to access R and RStudio from any location with an internet connection, facilitating collaboration on projects and data sharing.

3.  Cost-effectiveness: Cloud providers offer flexible pricing models that can be more cost-effective than running R on local hardware, especially for short-term or infrequent use cases.

4.  Security: Cloud service providers implement various security features, such as firewalls and encryption, to protect data and applications from unauthorized access or attacks. \[6\]

**Drawbacks:**

1.  Internet Dependency: Running R in the cloud relies on a stable internet connection, which may not be available at all times or in all locations. This can limit the ability to work on data analysis and modeling projects.

2.  Learning Curve: Utilizing cloud computing platforms and tools requires familiarity, which can pose a learning curve for users new to cloud computing.

3.  Data Privacy: Storing data in the cloud may raise concerns about data privacy, particularly for sensitive or confidential information. While cloud service providers offer security features, users must understand the risks and take appropriate measures to secure their data.

4.  Cost Considerations: While cloud computing can be cost-effective in certain scenarios, it can also become expensive for long-term or high-volume use cases, especially if additional resources like data storage are required alongside computational capacity. \[6\]

### Cloud Service Providers -- Posit, AWS, Azure, GCP

Here is a comparison of four prominent cloud service providers: Posit, AWS, Azure, and GCP.

**Posit:**

-   Posit is a relatively new cloud service provider that focuses on offering high-performance computing resources specifically for data-intensive applications.

-   They provide bare-metal instances that ensure superior performance and flexibility.

-   Posit is dedicated to data security and compliance, prioritizing the protection of user data.

-   They offer customizable hardware configurations tailored to meet specific application requirements.

**AWS:**

-   AWS is a well-established cloud service provider that offers a wide range of cloud computing services, including computing, storage, and database services.

-   It boasts a large and active user community, providing abundant resources and support for users.

-   AWS provides flexible pricing options, including pay-as-you-go and reserved instance pricing.

-   They offer a comprehensive set of tools and services for managing and securing cloud-based applications.

**Azure**:

-   Azure is another leading cloud service provider that offers various cloud computing services, including computing, storage, and networking.

-   It tightly integrates with Microsoft's enterprise software and services, making it an attractive option for organizations using Microsoft technologies.

-   Azure provides flexible pricing models, including pay-as-you-go, reserved instance, and spot instance pricing.

-   They offer a wide array of tools and services for managing and securing cloud-based applications.

**GCP:**

-   GCP is a cloud service provider that provides a comprehensive suite of cloud computing services, including computing, storage, and networking.

-   It offers specialized tools and services for machine learning and artificial intelligence applications.

-   GCP provides flexible pricing options, including pay-as-you-go and sustained use pricing.

-   They offer a range of tools and services for managing and securing cloud-based applications. \[7\]

## Getting Started -- Inbuilt R functions

### Mathematical Operations

R is a powerful programming language for performing mathematical operations and statistical calculations. Here are some common mathematical operations in R.

1.  Arithmetic Operations: R can perform basic arithmetic operations such as addition (+), subtraction (-), multiplication (\*), and division (/).

`{r} # Addition and Subtraction 5+9-3 # Multiplication and Division (5 + 3) * 7 /2}`

2.  Exponentiation and Logarithms: R can raise a number to a power using the \^ or \*\* operator or take logarithms.

`{r} # exponentiation 2^6 # Exponential of x=2 i.e. e^2 exp(2)  # logarithms base 2 and base 10 log2(64) + log10(100)}`

3.  Other mathematical functions: R has many additional useful mathematical functions.

-   We can find the absolute value, square roots, remainder on division.

`{r} # absolute value of x=-5 abs(-9)  # square root of x=70 sqrt(70) # remainder of the division of 11/3 11 %% 3}`

-   We can round numbers, find their floor, ceiling or up to a number of significant digits

`{r} # Value of pi to 10 decimal places pi = 3.1415926536  # round(): This function rounds a number to the given number of decimal places # For example, round(pi, 3) returns 3.142 round(pi,3)  # ceiling(): This function rounds a number up to the nearest integer.  # For example, ceiling(pi) returns 4 ceiling(pi)   # floor(): This function rounds a number down to the nearest integer.  # For example, floor(pi) returns 3. floor(pi)  # signif(): This function rounds a number to a specified number of significant digits.  # For example, signif(pi, 3) returns 3.14. signif(pi,3)}`

4.  Statistical calculations: R has many built-in functions for statistical calculations, such as mean, median, standard deviation, and correlation.

`{r} x <- c(0, 1, 1, 2, 3, 5, 8)   # create a vector of 7 Fibonacci numbers length(x) # count how many numbers do we have mean(x)   # calculate the mean median(x) # calculate the median sd(x)     # calculate the standard deviation y <- c(1, 2, 3, 4, 5, 6, 7) # create a new vector of positive integers cor(x,y)  # calculate the correlation between x and y}`

### Assigning values to variables

1.  A variable can be used to store a value. For example, the R code below will store the sales in a variable, say "sales":

`{r} # use the assignment operator <- sales <- 9 # alternately, use = sales = 9}`

2.  It is possible to use \<- or = for variable assignments.

3.  R is case-sensitive. This means that `Sales` is different from `sales`

4.  It is possible to perform some operations with it.

`{r} # multiply sales by 2 2 * sales}`

5.  We can change the value stored in a variable

`{r} # change the value sales <- 15 # display the revised sales sales}`

6.  The following R code creates two variables holding the sales and the price of a product and we can use them to compute the revenue.

`{r} # sales sales <- 5  # price price <- 7  # Calculate the revenue revenue <- price*sales revenue}`

## References

\[1\] Chambers, J. M. (2016). Extending R (2nd ed.). CRC Press.

Gandrud, C. (2015). Reproducible research with R and RStudio. CRC Press.

Grolemund, G., & Wickham, H. (2017). R for data science: Import, tidy, transform, visualize, and model data. O'Reilly Media.

Ihaka, R., & Gentleman, R. (1996). R: A language for data analysis and graphics. Journal of Computational and Graphical Statistics, 5(3), 299-314. <https://www.jstor.org/stable/1390807>

Murrell, P. (2006). R graphics. CRC Press.

Peng, R. D. (2016). R programming for data science. O'Reilly Media.

R Core Team (2020). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>

Venables, W. N., Smith, D. M., & R Development Core Team. (2019). An introduction to R. Network Theory Ltd. Retrieved from <https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf>

Wickham, H. (2014). Tidy data. Journal of Statistical Software, 59(10), 1-23.

Wickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer-Verlag.

Wickham, H., & Grolemund, G. (2017). R packages: Organize, test, document, and share your code. O'Reilly Media.

\[2\] The R Project for Statistical Computing. (2021). Download R for (Mac) OS X. <https://cran.r-project.org/bin/macosx/>

The R Project for Statistical Computing. (2021). Download R for Windows. <https://cran.r-project.org/bin/windows/base/>

The R Project for Statistical Computing. (2021). Download R for Linux. <https://cran.r-project.org/bin/linux/>

\[3\] Grant, E., & Allen, B. (2021). Integrated Development Environments: A Comprehensive Overview. Journal of Software Engineering, 16(3), 123-145. doi:10./jswe.2021.16.3.123

Johnson, M. L., & Smith, R. W. (2022). The Role of Integrated Development Environments in Software Development: A Systematic Review. ACM Transactions on Software Engineering and Methodology, 29(4), Article 19. doi:10./tosem.2022.29.4.19

RStudio, PBC. (n.d.). RStudio: Open source and enterprise-ready professional software for R. Retrieved July 3, 2023, from <https://www.rstudio.com/>

Microsoft. (n.d.). Visual Studio Code: Code Editing. Redefined. Retrieved July 3, 2023, from <https://code.visualstudio.com/>

Project Jupyter. (n.d.). Jupyter: Open-source, interactive data science and scientific computing across over 40 programming languages. Retrieved July 3, 2023, from <https://jupyter.org/>

\[4\] RStudio. (2021). RStudio. <https://www.rstudio.com/>

RStudio. (2021). RStudio. <https://www.rstudio.com/products/rstudio/features/>

\[5\] RStudio. (2021). RStudio. <https://www.rstudio.com/products/rstudio/download/>

\[6\] Armbrust, M., Fox, A., Griffith, R., Joseph, A. D., Katz, R., Konwinski, A., ... Zaharia, M. (2010). A view of cloud computing. Communications of the ACM, 53(4), 50--58. https://doi.org/10.1145/1721654.1721672

Xiao, Z., Chen, Z., & Zhang, J. (2014). Cloud computing research and security issues. Journal of Network and Computer Applications, 41, 1--11. https://doi.org/10.1016/j.jnca.2013.11.004

Cloud Spectator. (2021). Cloud Service Provider Pricing Models: A Comprehensive Guide. <https://www.cloudspectator.com/cloud-service-provider-pricing-models-a-comprehensive-guide/>

\[7\] Amazon Web Services. (2021). AWS. <https://aws.amazon.com/>

Amazon Web Services. (2021). Running RStudio Server Pro using Amazon EC2. <https://docs.rstudio.com/rsp/quickstart/aws/>

Amazon Web Services. (2021). EC2 User Guide for Linux Instances. <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html>

Google Cloud Platform. (2021). GCP. <https://cloud.google.com/>

Google Cloud Platform. (2021). Compute Engine Documentation. <https://cloud.google.com/compute/docs>

Microsoft Azure. (2021). Azure. <https://azure.microsoft.com/>

Microsoft Azure. (2021). Create a Windows virtual machine with the Azure portal. <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal>

Posit. (2021). High-Performance Computing Services. <https://posit.cloud/>
