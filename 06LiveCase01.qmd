# Case Analysis of SP500

We will investigate data related to the S&P500 stocks.

This is the URL of the data we will use: https://docs.google.com/spreadsheets/d/11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM/edit#gid=0

### 1) Reading S&P500 data from a Google Sheet into a tibble

The Google Sheet ID is: `11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM`. We can use the function `gsheet2tbl` in package `gsheet` to read the Google Sheet into a dataframe, as demonstrated in the following code.

```{r, warning=FALSE}
# Read S&P500 stock data present in a Google Sheet.
library(gsheet)

prefix <- "https://docs.google.com/spreadsheets/d/"
sheetID <- "11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM"
# Form the URL to connect to
url500 <- paste(prefix, sheetID) 
# Read the Google Sheet located at the URL into a tibble called sp500
sp500 <- gsheet2tbl(url500)
```

### 1) Reviewing the data

We run the str() function to better understand the data.

```{r, warning=FALSE}
str(sp500)
```

The `str(sp500)` output provides valuable insights into the structure and data types of the columns in the `sp500` tibble. Let's delve into the details:

The output reveals that `sp500` is a tibble with dimensions \[503 Ã— 36\]. This means it consists of 503 rows, each representing a specific S&P500 stock, and 36 columns containing information about each stock.

Here's a breakdown of the information associated with each column:

-   The columns labeled `Date`, `Stock`, `Description`, `Sector`, and `Industry` are character columns. They respectively represent the date, stock ticker symbol, description, sector, and industry of each S&P500 stock.

-   Columns such as `Market.Capitalization`, `Price`, `X52.Week.Low`, `X52.Week.High`, and other numeric columns contain diverse financial metrics and stock prices related to the S&P500 stocks.

-   The column labeled `Technical.Rating` is a character column that assigns a technical rating to each stock.

By examining the `str(sp500)` output, you gain a comprehensive understanding of the data types and column names present in the `sp500` tibble, enabling you to grasp the structure of the dataset effectively.

### Rename Data Columns

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
suppressPackageStartupMessages(library(dplyr))
```

```{r, warning=FALSE, eval=FALSE, echo=TRUE}
library(dplyr)
```

```{r, warning=FALSE}
# Define a mapping of new column names
new_names <- c(
  "Date", "Stock", "Desc", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "TechRating"
)
# Rename the columns using the new_names vector
sp500 <- sp500 %>% 
  rename_with(~ new_names, everything())

```

This code is designed to rename the columns of the `sp500` tibble using a predefined mapping of new column names. Let's go through the code step by step:

1. A vector named `new_names` is created, which contains the desired new names for each column in the `sp500` tibble. Each element in the `new_names` vector corresponds to a specific column in the `sp500` tibble and represents the desired new name for that column.

2. The `%>%` operator, often referred to as the pipe operator, is used to pass the `sp500` tibble to the subsequent operation in a more readable and concise manner.

3. The `rename_with()` function from the `dplyr` package is applied to the `sp500` tibble. This function allows you to rename columns based on a specified function or formula.

4. In this case, a formula `~ new_names` is used as the first argument of `rename_with()`. This formula indicates that the new names for the columns should be sourced from the `new_names` vector.

5. The second argument, `everything()`, specifies that the renaming should be applied to all columns in the `sp500` tibble.

6. Finally, the resulting tibble with the renamed columns is assigned back to the `sp500` variable, effectively updating the tibble with the new column names.

In essence, the code uses the `new_names` vector as a mapping to assign new column names to the `sp500` tibble, ensuring that each column is given the desired new name specified in `new_names`.


### Review Data Columns

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
library(tibble)

new_names <- c(
  "Date", "Stock", "Desc", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "TechRating"
)

descriptions <- c(
  "Date of the observation",
  "Stock ticker symbol",
  "Description of the stock",
  "Sector the stock belongs to",
  "Industry the stock belongs to",
  "Market capitalization of the company",
  "Stock price",
  "52-week low price",
  "52-week high price",
  "Return on Equity",
  "Return on Assets",
  "Return on Invested Capital",
  "Gross Margin",
  "Operating Margin",
  "Net Margin",
  "Price-to-Earnings Ratio",
  "Price-to-Book Ratio",
  "Enterprise Value to EBITDA",
  "EBITDA",
  "Earnings per Share",
  "EBITDA Year-over-Year Growth",
  "EBITDA Quarterly Year-over-Year Growth",
  "EPS Year-over-Year Growth",
  "EPS Quarterly Year-over-Year Growth",
  "Price-to-Free Cash Flow",
  "Free Cash Flow",
  "Free Cash Flow Quarterly Year-over-Year Growth",
  "Debt-to-Equity Ratio",
  "Current Ratio",
  "Quick Ratio",
  "Dividend Yield",
  "Annual Dividends per Share Year-over-Year Growth",
  "Price-to-Sales Ratio",
  "Revenue Year-over-Year Growth",
  "Revenue Quarterly Year-over-Year Growth",
  "Technical Rating"
)

column_info <- tibble(Name = new_names, Description = descriptions)

```

### Data Description 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}

suppressPackageStartupMessages(library(kableExtra))

column_table <- knitr::kable(column_info, "html") %>%
  kable_styling() %>%
  add_header_above(c("Table 1: Desription of Column Names" = ncol(column_info)))

column_table
```

